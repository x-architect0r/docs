{
  "openapi": "3.1.0",
  "info": {
    "title": "Buildr API",
    "description": "API specification for Buildr - an AI-powered DeFi agent platform that enables natural language interactions with blockchain protocols",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.buildr.bot"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/chat-completions": {
      "post": {
        "summary": "Chat Completions",
        "description": "Sends a message to Buildr Agent and returns the response.",
        "operationId": "createChatCompletion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful chat response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/create-agent": {
      "post": {
        "tags": ["Agent"],
        "summary": "Create Agent",
        "description": "Create a new AI agent with specified capabilities and triggers",
        "operationId": "createAgent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAgent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/delete-agent/{id}": {
      "delete": {
        "tags": ["Agent"],
        "summary": "Delete Agent",
        "description": "Delete an existing AI agent by its ID",
        "operationId": "deleteAgent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of agent to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/agent/{id}": {
      "get": {
        "tags": ["Agent"],
        "summary": "Get Agent",
        "description": "Retrieve details of an existing AI agent by its ID",
        "operationId": "getAgent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of agent to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChatRequest": {
        "type": "object",
        "required": ["messages"],
        "properties": {
          "messages": {
            "type": "array",
            "description": "The conversation messages to send to Buildr Agent.",
            "items": {
              "type": "object",
              "required": ["role", "content"],
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the message sender",
                  "enum": ["system", "user", "assistant"]
                },
                "content": {
                  "type": "string",
                  "description": "The message content"
                }
              }
            }
          },
          "model": {
            "type": "string",
            "description": "The model to use for chat completion",
            "example": "gpt-4"
          },
          "context": {
            "type": "string",
            "description": "Optional context for the agent (e.g., 'user wants to swap tokens')."
          }
        },
        "examples": [
          {
            "messages": [
              {
                "role": "user",
                "content": "How do I swap 0.1 BNB to MUBARAK?"
              }
            ],
            "model": "gpt-4",
            "context": "user wants to swap tokens"
          },
          {
            "messages": [
              {
                "role": "system",
                "content": "You are a helpful trading assistant."
              },
              {
                "role": "user",
                "content": "What's the current price of MUBARAK?"
              }
            ],
            "model": "gpt-4"
          }
        ]
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "reply": {
            "type": "string",
            "description": "The response generated by the Buildr Agent."
          }
        }
      },
      "Agent": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the agent"
          },
          "name": {
            "type": "string",
            "description": "The name of the agent"
          },
          "type": {
            "type": "string",
            "description": "Type of agent",
            "enum": ["DeFi", "NFT", "Social", "Trading"]
          },
          "description": {
            "type": "string",
            "description": "A detailed description of what the agent does"
          },
          "networks": {
            "type": "array",
            "description": "List of blockchain networks the agent operates on",
            "items": {
              "type": "string"
            }
          },
          "triggers": {
            "type": "array",
            "description": "Conditions that activate the agent",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["price", "time", "volume", "onchain"]
                },
                "condition": {
                  "type": "string"
                },
                "parameters": {
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "type": "array",
            "description": "Actions the agent performs when triggered",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["swap", "transfer", "deploy", "monitor"]
                },
                "parameters": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "NewAgent": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the agent"
          },
          "type": {
            "type": "string",
            "description": "Type of agent",
            "enum": ["DeFi", "NFT", "Social", "Trading"]
          },
          "description": {
            "type": "string",
            "description": "A detailed description of what the agent does"
          },
          "networks": {
            "type": "array",
            "description": "List of blockchain networks the agent operates on",
            "items": {
              "type": "string"
            }
          },
          "triggers": {
            "type": "array",
            "description": "Conditions that activate the agent",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["price", "time", "volume", "onchain"]
                },
                "condition": {
                  "type": "string"
                },
                "parameters": {
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "type": "array",
            "description": "Actions the agent performs when triggered",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["swap", "transfer", "deploy", "monitor"]
                },
                "parameters": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}